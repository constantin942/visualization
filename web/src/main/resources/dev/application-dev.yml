# 生成数据库设计文档存放的路径
doc_dir_path: /Users/apple/skywalking-mingshi-server

spring:
  servlet:
    multipart:
      # 上传文件总的最大值
      max-request-size: 1000MB
      # 单个文件的最大值
      max-file-size: 1000MB
  application:
    name: firewall-rule-analysis-management-system
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: Aiit@123
    #    url: jdbc:mysql://10.0.107.46:3306/mingshi_skywlking_server?useUnicode=true&characterEncodingncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&allowMultiQueries=true
    #    url: jdbc:mysql://10.0.102.64:3306/skywalking_mingshi?useUnicode=true&characterEncodingncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&allowMultiQueries=true
    #    url: jdbc:mysql://10.0.107.46:3306/es_mingshi_skywalking?useUnicode=true&characterEncodingncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&allowMultiQueries=true
    #    url: jdbc:mysql://10.0.107.46:3306/zm_mingshi_skywalking?useUnicode=true&characterEncodingncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&allowMultiQueries=true
    #    url: jdbc:mysql://10.0.107.46:3306/mingshi_skywalking?useUnicode=true&characterEncodingncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&allowMultiQueries=true
    url: jdbc:mysql://10.0.107.46:3306/test_mingshi_skyflying?useUnicode=true&characterEncodingncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&allowMultiQueries=true
  #    url: jdbc:mysql://10.0.107.46:3306/mingshi-skywalking-demonstration?useUnicode=true&characterEncodingncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&allowMultiQueries=true
  #    url: jdbc:mysql://10.0.107.46:3306/mingshi_skywlking_server?useUnicode=true&characterEncodingncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&allowMultiQueries=true
  #    url: jdbc:mysql://10.0.107.46:3306/lanjing?useUnicode=true&characterEncodingncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&allowMultiQueries=true
    hikari:
      # 连接池中允许的最小连接数。缺省值：10
      minimum-idle: 10
      # 连接池中允许的最大连接数。缺省值：10
      maximum-pool-size: 100
      # 自动提交
      auto-commit: true
      # 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟
      idle-timeout: 5000
      # 连接池名字
      pool-name: skywalking-mingshi
      # 一 个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒
      max-lifetime: 1800000
      # 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒
      connection-timeout: 30000
  jpa:
    show-sql: true
    database-platform: org.hibernate.dialect.MySQLDialect
  profiles:
    active: dev
  redis:
    timeout: 10000
    database: 0
    # Redis服务器连接密码
    password: Aiit@123
    # Redis服务器地址
    #    host: 10.0.102.64
    host: 10.0.107.46
    # Redis服务器连接端口
    #    port: 6379
    port: 6380
    jedis:
      #连接池中最大连接数，默认为 8。
      maxTotal: 10000
      # 连接池中最大的空闲连接数，默认为 8。
      maxIdle: 100
      # 连接池中最少空闲连接数，默认为 0。
      minIdle: 8
      # 当连接池资源用尽后，调用者的最大等待时间（单位为毫秒），一般不建议使用默认值，该默认值为-1，表示永远不超时，一直等待。
      maxWaitMillis: 5000
      # 向连接池借用连接时是否做连接有效性检测（ping），无效连接会被移除，每次借用多执行一次 ping 命令，默认值为 false。
      testOnBorrow: false
      #最大连接数据库连接数,设 0 为没有限制
      max-active: 0
      #最大等待连接中的数量,设 0 为没有限制
      max-idle: 0
      #最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。
      max-wait: -1ms
      #最小等待连接中的数量,设 0 为没有限制
      min-idle: 0
    ##连接池最大连接数（使用负值表示没有限制） 默认8
    lettuce:
      pool:
        # 最大活跃连接数，负数为不限制
        max-active: -1
        ## 连接池中的最大空闲连接 默认8
        max-idle: 5000
        ## 连接池中的最小空闲连接 默认0
        min-idle: 50
        ## 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1
        max-wait: -1
  #    sentinel:
  #      master: mymaster
  #      nodes: 10.0.107.11:26380,10.0.107.12:26381,10.0.107.13:26382

  kafka:
    bootstrap-servers: 10.0.107.49:9092,10.0.107.50:9092,10.0.107.51:9092
    # 由于某种原因，异常检测没有执行成功，那么就把这些消息发送到这个topic中；
    anomaly-detection-consume-failed-topic: anomaly-detection-consume-failed-topic
    # 告警信息发送到这个topic中；
    anomaly-detection-alarm-topic: anomaly-detection-alarm-topic
    producer:
      topic: skywalking-segments
      # 发生错误后，消息重发的次数。
      retries: 5
      #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。4194304B = 4MB。
      batch-size: 4194304
      # 设置生产者内存缓冲区的大小。67108864B = 64MB。
      buffer-memory: 67108864
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.BytesSerializer
      #      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: all
      # 当spring.kafka.producer.xxx没有直接配置项的时候，spring在集成kafka时，放置了一个map的配置属性，就是说，把哪些没有直接配置项的配置放到这个map--properties中进行配置；
      # 当spring.kafka.consumer.xxx没有直接配置项的时候，spring在集成kafka时，放置了一个map的配置属性，就是说，把哪些没有直接配置项的配置放到这个map--properties中进行配置；
      # 当springboot项目启动的时候，springboot会加载这些配置项，并与没有设置的配置项做一个合并放到内存中。当KafkaProducer发送消息或者使用KafkaConsumer消费消息时，直接使用已加载好配置项即可；
      properties:
        # 最大可以发送一条4MB的消息到Broker端；4194304B = 4MB。
        max.request.size: 4194304
        # 发送一条消息出去，100毫秒内还没有凑成一个batch，则必须立即发送出去；
        linger.ms: 100
        # 每次重试间隔500毫秒；
        retry.backoff.ms: 500
    consumer:
      topic: skywalking-segments
      agent-switch-request-topic: agent-switch-request-topic
      agent-switch-response-topic: agent-switch-response-topic
      send-state-exception-info-topic: send-state-exception-info-topic
      send-state-exception-info-agent-group: send-state-exception-info-agent-group
      group: skyflying-consumer-group
      agent-switch-response-group: agent-switch-response-group
      # 异常检测用的消费者组
      anomaly-detection-consume-failed-and-alarm-group: anomaly-detection-consume-failed-and-alarm-group
mybatis-plus:
  configuration:
    #    在控制台中输出SQL语句；2021-12-02 18:40:52
#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    map-underscore-to-camel-case: true
    default-fetch-size: 100
    default-statement-timeout: 3000
  mapper-locations: classpath*:mappers/*xml

logging:
  config: classpath:logback-spring.xml

server:
  port: 9090
  address:
  compression:
    excluded-user-agents:
  max-http-header-size: 40485760

reactor:
  processor:
    enable: true
    thread:
      count: 1
  iothread:
    thread:
      count: 1
